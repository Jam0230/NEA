---------------------[ KEY WORDS ]---------------------
  
Flow control:
  - If
  - Else
  - elif
  - match
  - case
  - For
  - While
  - Break
  - Continue
Variable typing/declaration:
  - let
  - int
  - float
  - str
  - char
  - bool
Functions:
  - def
  - return
OOP:
  - struct
  - class
  - enum
  - priv
  - pub

-----------------------[ TOKENS ]----------------------

[Key word]
[Type]
[Literal] => [int] [float] [str] [bool] [char]
[ID] 
[Delim] 
[Operator] => [arithmetic] [assignment] [bitwise] [logical] [comparison]
[Comment] 
[Whitespace]

-----------------[ REGULAR EXPRESSIONS ]---------------

[Keyword] => (if|else|elif|match|case|for|while|break|continue|let|def|return|struct|class|enum|priv|pub)

[Type] => (int|float|str|char|bool)

[Literal] :
    - [int] => [1-9][0-9]*|0 // only base 10
    - [float] => [1-9][0-9]*\.[1-9][0-9]* // only decimal
    - [str] => "[a-zA-Z0-9]*" // no symbols 
    - [bool] => true|false
    - [char] => '[a-zA-Z0-9]'

[ID] => [a-zA-Z_][a-zA-Z0-9_]*

[Delim] => [(){}\[\]<>;:,.] // not sure if it got everything so check later

[Operator] :
    - [arithmetic] => (\+ | - | \/ | \* | %)
    - [assignment] => (= | +=| -= | \/= | *=)
    - [bitwise] => () // not implemented yet 
    - [logical] => (&& | \|\| | !)
    - [comparison] => (== | != | < | > | <= | >=)

[Comment] => \/\/.*|\/\*[\s\S]*?\*\/

[Whitespace] => \s+



---------------------[ STRUCTURES ]--------------------

Assigning:
  // C / C++
  < Type > < Id> = < Val >;
  or 
  // Rust
  let < Id >: < Type > = < Val >;
  or
  // Go / kotlin / ...
  var < Id >: < Type > = < Val >;

If/Else statements:
  // Python
  if ( < Condition > ) {

  } elif ( < Condition > ) {

  } else {

  }


For loop:
  // Python
  for < Id > in range(f, l, d){

    }
  or 
  //  C++ / C / C#
  //       run once       condition    run every loop
  for ( < Expression >; < Condition >; < Expression > ){

  }

While loop:
  while ( < Condition > ) {

  }

match/case statements:
  // Python
  match < Id > {
    case < Val > {

    }
    case < Val > {

    }
    case _{

    }
  }
  or
  // C++ / C
  switch < Id > {
    case < Val > {

    }
    case < Val > {

    }
    default{

    }
  }
  or
  // Rust
  match < Id >{
      < Val > => {},
      < Val > => {},
      _ => {}
  }

Comments:
// C / C++ / Rust
// This is a Comment
/*
This is a multiline comment
Woah new line :O
*/
