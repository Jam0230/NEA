---------------------[ KEY WORDS ]---------------------
  
Flow control:
  - If
  - Else
  - elif
  - match
  - case
  - For
  - While
  - Break
  - Continue
Variable typing/declaration:
  - let
  - int
  - float
  - str
  - char
  - bool
Functions:
  - def
  - return
OOP:
  - struct
  - class
  - enum
  - priv
  - pub

-----------------------[ TOKENS ]----------------------

[Key word]
[Type]
[Literal] => [int] [float] [str] [bool] [char]
[ID] 
[Delim] 
[Operator] => [arithmetic] [assignment] [bitwise] [logical] [comparison]
[Comment] 
[Whitespace]

-----------------[ REGULAR EXPRESSIONS ]---------------

[Keyword] => (if|else|elif|match|case|for|while|break|continue|let|def|return|struct|class|enum|priv|pub|import)

[Type] => (int|float|str|char|bool)

[Literal] :
    - [int] => [1-9][0-9]*|0 // only base 10
    - [float] => [0-9][0-9]*\.[0-9]+ // only decimal
    - [str] => "[^"]*" // no character escaping yet
    - [char] => '[^']' // no character escaping yet
    - [bool] => true|false

[ID] => [a-zA-Z_][a-zA-Z0-9_]*

[Delim] => [(){}\[\]<>;:,.] // not sure if it has everything so check later

[Operator] :
    - [arithmetic] => (\+ | - | \/ | \* | %)
    - [assignment] => (= | \+= | -= | \/= | \*=) // no shorthand bitwise assignment yet
    - [bitwise] => () // not implemented yet 
    - [logical] => (&& | \|\| | !)
    - [comparison] => (== | != | < | > | <= | >=)

[Comment] => \/\/.*|\/\*[\s\S]*?\*\/

[Whitespace] => \s+

---------------------[ STRUCTURES ]--------------------

Assigning:
  let < Id >: < Type > = < Val >;

If/Else statements:
  if ( < Condition > ) {

  } elif ( < Condition > ) {

  } else {

  }


For loop:
  //       run once       condition    run every loop
  for ( < Expression >; < Condition >; < Expression > ){

  }

While loop:
  while ( < Condition > ) {

  }

match/case statements:
  match < Id > {
    case < Val > {

    }
    case < Val > {

    }
    case _{

    }
  }
 
Comments:
// This is a Comment
/*
This is a multiline comment
Woah new line :O
*/

---------------------[ CFG ]-----------------------------

// Currently only variable declaration assigment, if and while statment

#########################################
#  non-terminals = < Name >             #
#  terminals = "(value)" or [ Type ]    #
#########################################


<Program> = <Statements>

<Statements> = <Statement> <Statements>
             | ε

<Statement> = <Declaration_Stmt> ";"
            | <Assign_Stmt> ";"
            | <If_Stmt>
            | <While_Stmt>

<Declaration_Stmt> = "let" [Type] [Id] "=" <Or_Expr> 

<Assign_Stmt> = [Id] [Assignment] <Or_Expr>

<If_Stmt> = "if" "(" <Or_Expr> ")" "{" <Statements> "}" <Elif_Stmt_Prime> <Else_Stmt>


<Elif_Stmt_Prime> = <Elif_Stmt> <Elif_Stmt_Prime>
        | ε

<Elif_Stmt> = "elif" "(" <Or_Expr> ")" "{" <Statements> "}" 

<Else_Stmt> = "else" "{" <Statements> "}"
            | ε

<While_Stmt> = "while" "(" <Or_Expr> ")" "{" <Statements> "}"

<Or_Expr> = <And_Expr> <Or_Expr_Prime>
<Or_Expr_Prime> = "||" <And_Expr> <Or_Expr_Prime>
                | ε

<And_Expr> = <Equality_Expr> <And_Expr_Prime>
<And_Expr_Prime> = "&&" <Equality_Expr> <And_Expr_Prime>
                 | ε 

<Equality_Expr> = <Inequality_Expr> <Equality_Expr_Prime>
<Equality_Expr_Prime> = "==" <Inequality_Expr> <Equality_Expr_Prime>
                      | "!=" <Inequality_Expr> <Equality_Expr_Prime>
                      | ε

<Inequality_Expr> = <Addition_Expr> <Inequality_Expr_Prime>
<Inequality_Expr_Prime> = ">" <Addition_Expr> <Inequality_Expr_Prime>
                        | "<" <Addition_Expr> <Inequality_Expr_Prime>
                        | ">=" <Addition_Expr> <Inequality_Expr_Prime>
                        | "<=" <Addition_Expr> <Inequality_Expr_Prime>
                        | ε

<Addition_Expr> = <Multiplication_Expr> <Addition_Expr_Prime>
<Addition_Expr_Prime = "+" <Multiplication_Expr> <Addition_Expr_Prime>
                     | "-" <Multiplication_Expr> <Addition_Expr_Prime>
                     | ε

<Multiplication_Expr> = <Unary_Expr> <Multiplication_Expr_Prime>
<Multiplication_Expr_Prime> = "*" <Unary_Expr> <Multiplication_Expr_Prime>
                            | "/" <Unary_Expr> <Multiplication_Expr_Prime>
                            | ε

<Unary_Expr> = "!" <Unary_Expr>
             | <Expr_Atom>

<Expr_Atom> = [int]
            | [float]
            | [str]
            | [char]
            | [bool]
            | [Id]
            | "(" <Or_Expr> ")"
