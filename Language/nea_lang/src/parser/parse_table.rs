use std::collections::HashMap;
use std::fs;

#[allow(dead_code)]
pub fn generate_parse_table() {
    let parse_table_data = fs::read_to_string(
        "/home/jam/Documents/School/ComputerScience/NEA/Language/nea_lang/res/tables/parse_table",
    )
    .expect("AHHHHHHHH but parsing :O");
    let rows = parse_table_data.split(";;").collect::<Vec<&str>>();

    for row in rows {
        let lines = row.split('\n').collect::<Vec<&str>>();
        let left_nt = format!("<{}>", lines[0].split('=').next().unwrap());

        for line_i in 1..lines.len() - 2 {
            let parts = lines[line_i].split("->").collect::<Vec<&str>>();
            let input_expected = parts[0].trim();

            let output = format!("{:?}", parts[1].split(',').collect::<Vec<&str>>());
            println!("(({:?}, {:?}), vec!{}),", left_nt, input_expected, output);
        }
    }
}

pub fn load_parse_table() -> HashMap<(&'static str, &'static str), Vec<&'static str>> {
    let hash = HashMap::from([
        (("<P>", "let"), vec!["<SS>"]),
        (("<P>", "[Id]"), vec!["<SS>"]),
        (("<P>", "if"), vec!["<SS>"]),
        (("<P>", "for"), vec!["<SS>"]),
        (("<P>", "while"), vec!["<SS>"]),
        (("<P>", "match"), vec!["<SS>"]),
        (("<P>", "$"), vec!["<SS>"]),
        (("<SS>", "let"), vec!["<S>", "<SS>"]),
        (("<SS>", "[Id]"), vec!["<S>", "<SS>"]),
        (("<SS>", "if"), vec!["<S>", "<SS>"]),
        (("<SS>", "for"), vec!["<S>", "<SS>"]),
        (("<SS>", "while"), vec!["<S>", "<SS>"]),
        (("<SS>", "match"), vec!["<S>", "<SS>"]),
        (("<SS>", "$"), vec![]),
        (("<SS>", "}"), vec![]),
        (("<S>", "let"), vec!["<DS>", ";"]),
        (("<S>", "[Id]"), vec!["<AS>", ";"]),
        (("<S>", "if"), vec!["<IS>"]),
        (("<S>", "for"), vec!["<FS>"]),
        (("<S>", "while"), vec!["<WS>"]),
        (("<S>", "match"), vec!["<MS>"]),
        (("<DS>", "let"), vec!["let", "[Type]", "[Id]", "=", "<OE>"]),
        (("<AS>", "[Id]"), vec!["[Id]", "[Assignment]", "<OE>"]),
        (
            ("<IS>", "if"),
            vec!["if", "(", "<OE>", ")", "{", "<SS>", "}", "<EISP>", "<ES>"],
        ),
        (("<EISP>", "elif"), vec!["<EIS>", "<EISP>"]),
        (("<EISP>", "else"), vec![]),
        (("<EISP>", "let"), vec![]),
        (("<EISP>", "[Id]"), vec![]),
        (("<EISP>", "if"), vec![]),
        (("<EISP>", "for"), vec![]),
        (("<EISP>", "while"), vec![]),
        (("<EISP>", "match"), vec![]),
        (("<EISP>", "}"), vec![]),
        (("<EISP>", "$"), vec![]),
        (
            ("<EIS>", "elif"),
            vec!["elif", "(", "<OE>", ")", "{", "<SS>", "}"],
        ),
        (("<ES>", "else"), vec!["else", "{", "<SS>", "}"]),
        (("<ES>", "let"), vec![]),
        (("<ES>", "[Id]"), vec![]),
        (("<ES>", "if"), vec![]),
        (("<ES>", "for"), vec![]),
        (("<ES>", "while"), vec![]),
        (("<ES>", "match"), vec![]),
        (("<ES>", "}"), vec![]),
        (("<ES>", "$"), vec![]),
        (
            ("<MS>", "match"),
            vec!["match", "(", "<OE>", ")", "{", "<CSP>", "}"],
        ),
        (("<CSP>", "case"), vec!["<CS>", "<CSP>"]),
        (("<CSP>", "}"), vec![]),
        (("<CS>", "case"), vec!["case", "<OE>", "{", "<SS>", "}"]),
        (
            ("<FS>", "for"),
            vec![
                "for", "(", "<DS>", ";", "<OE>", ";", "<AS>", ")", "{", "<SS>", "}",
            ],
        ),
        (
            ("<WS>", "while"),
            vec!["while", "(", "<OE>", ")", "{", "<SS>", "}"],
        ),
        (("<OE>", "[Int]"), vec!["<AE>", "<OEP>"]),
        (("<OE>", "[Float]"), vec!["<AE>", "<OEP>"]),
        (("<OE>", "[Str]"), vec!["<AE>", "<OEP>"]),
        (("<OE>", "[Char]"), vec!["<AE>", "<OEP>"]),
        (("<OE>", "[Bool]"), vec!["<AE>", "<OEP>"]),
        (("<OE>", "[Id]"), vec!["<AE>", "<OEP>"]),
        (("<OE>", "("), vec!["<AE>", "<OEP>"]),
        (("<OEP>", "||"), vec!["||", "<AE>", "<OEP>"]),
        (("<OEP>", ";"), vec![]),
        (("<OEP>", ")"), vec![]),
        (("<OEP>", "{"), vec![]),
        (("<AE>", "[Int]"), vec!["<NE>", "<AEP>"]),
        (("<AE>", "[Float]"), vec!["<NE>", "<AEP>"]),
        (("<AE>", "[Str]"), vec!["<NE>", "<AEP>"]),
        (("<AE>", "[Char]"), vec!["<NE>", "<AEP>"]),
        (("<AE>", "[Bool]"), vec!["<NE>", "<AEP>"]),
        (("<AE>", "[Id]"), vec!["<NE>", "<AEP>"]),
        (("<AE>", "("), vec!["<NE>", "<AEP>"]),
        (("<AEP>", "&&"), vec!["&&", "<NE>", "<AEP>"]),
        (("<AEP>", "||"), vec![]),
        (("<AEP>", ";"), vec![]),
        (("<AEP>", ")"), vec![]),
        (("<AEP>", "{"), vec![]),
        (("<NE>", "[Int]"), vec!["<CE>", "<NEP>"]),
        (("<NE>", "[Float]"), vec!["<CE>", "<NEP>"]),
        (("<NE>", "[Str]"), vec!["<CE>", "<NEP>"]),
        (("<NE>", "[Char]"), vec!["<CE>", "<NEP>"]),
        (("<NE>", "[Bool]"), vec!["<CE>", "<NEP>"]),
        (("<NE>", "[Id]"), vec!["<CE>", "<NEP>"]),
        (("<NE>", "("), vec!["<CE>", "<NEP>"]),
        (("<NEP>", "!"), vec!["!", "<CE>", "<NEP>"]),
        (("<NEP>", "&&"), vec![]),
        (("<NEP>", "||"), vec![]),
        (("<NEP>", ";"), vec![]),
        (("<NEP>", ")"), vec![]),
        (("<NEP>", "{"), vec![]),
        (("<CE>", "[Int]"), vec!["<ADE>", "<CEP>"]),
        (("<CE>", "[Float]"), vec!["<ADE>", "<CEP>"]),
        (("<CE>", "[Str]"), vec!["<ADE>", "<CEP>"]),
        (("<CE>", "[Char]"), vec!["<ADE>", "<CEP>"]),
        (("<CE>", "[Bool]"), vec!["<ADE>", "<CEP>"]),
        (("<CE>", "[Id]"), vec!["<ADE>", "<CEP>"]),
        (("<CE>", "("), vec!["<ADE>", "<CEP>"]),
        (
            ("<CEP>", "[Comparison]"),
            vec!["[Comparison]", "<ADE>", "<CEP>"],
        ),
        (("<CEP>", "!"), vec![]),
        (("<CEP>", "&&"), vec![]),
        (("<CEP>", "||"), vec![]),
        (("<CEP>", "||"), vec![]),
        (("<CEP>", ";"), vec![]),
        (("<CEP>", ")"), vec![]),
        (("<CEP>", "{"), vec![]),
        (("<ADE>", "[Int]"), vec!["<SE>", "<ADEP>"]),
        (("<ADE>", "[Float]"), vec!["<SE>", "<ADEP>"]),
        (("<ADE>", "[Str]"), vec!["<SE>", "<ADEP>"]),
        (("<ADE>", "[Char]"), vec!["<SE>", "<ADEP>"]),
        (("<ADE>", "[Bool]"), vec!["<SE>", "<ADEP>"]),
        (("<ADE>", "[Id]"), vec!["<SE>", "<ADEP>"]),
        (("<ADE>", "("), vec!["<SE>", "<ADEP>"]),
        (("<ADEP>", "+"), vec!["+", "<SE>", "<ADEP>"]),
        (("<ADEP>", "[Comparison]"), vec![]),
        (("<ADEP>", "!"), vec![]),
        (("<ADEP>", "&&"), vec![]),
        (("<ADEP>", "||"), vec![]),
        (("<ADEP>", "||"), vec![]),
        (("<ADEP>", ";"), vec![]),
        (("<ADEP>", ")"), vec![]),
        (("<ADEP>", "{"), vec![]),
        (("<SE>", "[Int]"), vec!["<ME>", "<SEP>"]),
        (("<SE>", "[Float]"), vec!["<ME>", "<SEP>"]),
        (("<SE>", "[Str]"), vec!["<ME>", "<SEP>"]),
        (("<SE>", "[Char]"), vec!["<ME>", "<SEP>"]),
        (("<SE>", "[Bool]"), vec!["<ME>", "<SEP>"]),
        (("<SE>", "[Id]"), vec!["<ME>", "<SEP>"]),
        (("<SE>", "("), vec!["<ME>", "<SEP>"]),
        (("<SEP>", "-"), vec!["["]),
        (("<SEP>", "+"), vec![]),
        (("<SEP>", "[Comparison]"), vec![]),
        (("<SEP>", "!"), vec![]),
        (("<SEP>", "&&"), vec![]),
        (("<SEP>", "||"), vec![]),
        (("<SEP>", "||"), vec![]),
        (("<SEP>", ";"), vec![]),
        (("<SEP>", ")"), vec![]),
        (("<SEP>", "{"), vec![]),
        (("<ME>", "[Int]"), vec!["<DE>", "<MEP>"]),
        (("<ME>", "[Float]"), vec!["<DE>", "<MEP>"]),
        (("<ME>", "[Str]"), vec!["<DE>", "<MEP>"]),
        (("<ME>", "[Char]"), vec!["<DE>", "<MEP>"]),
        (("<ME>", "[Bool]"), vec!["<DE>", "<MEP>"]),
        (("<ME>", "[Id]"), vec!["<DE>", "<MEP>"]),
        (("<ME>", "("), vec!["<DE>", "<MEP>"]),
        (("<MEP>", "*"), vec!["*", "<DE>", "<MEP>"]),
        (("<MEP>", "-"), vec![]),
        (("<MEP>", "+"), vec![]),
        (("<MEP>", "[Comparison]"), vec![]),
        (("<MEP>", "!"), vec![]),
        (("<MEP>", "&&"), vec![]),
        (("<MEP>", "||"), vec![]),
        (("<MEP>", ";"), vec![]),
        (("<MEP>", ")"), vec![]),
        (("<MEP>", "{"), vec![]),
        (("<DE>", "[Int]"), vec!["<EA>", "<DEP>"]),
        (("<DE>", "[Float]"), vec!["<EA>", "<DEP>"]),
        (("<DE>", "[Str]"), vec!["<EA>", "<DEP>"]),
        (("<DE>", "[Char]"), vec!["<EA>", "<DEP>"]),
        (("<DE>", "[Bool]"), vec!["<EA>", "<DEP>"]),
        (("<DE>", "[Id]"), vec!["<EA>", "<DEP>"]),
        (("<DE>", "("), vec!["<EA>", "<DEP>"]),
        (("<DEP>", "/"), vec!["/", "<EA>", "<DEP>"]),
        (("<DEP>", "*"), vec![]),
        (("<DEP>", "-"), vec![]),
        (("<DEP>", "+"), vec![]),
        (("<DEP>", "[Comparison]"), vec![]),
        (("<DEP>", "!"), vec![]),
        (("<DEP>", "&&"), vec![]),
        (("<DEP>", "||"), vec![]),
        (("<DEP>", ";"), vec![]),
        (("<DEP>", ")"), vec![]),
        (("<DEP>", "{"), vec![]),
        (("<EA>", "[Int]"), vec!["[Int]"]),
        (("<EA>", "[Float]"), vec!["[Float]"]),
        (("<EA>", "[Str]"), vec!["[Str]"]),
        (("<EA>", "[Char]"), vec!["[Char]"]),
        (("<EA>", "[Bool]"), vec!["[Bool]"]),
        (("<EA>", "[Id]"), vec!["[Id]"]),
        (("<EA>", "("), vec!["(", "<OE>", ")"]),
    ]);

    hash
}
